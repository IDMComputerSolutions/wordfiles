<?xml version="1.0"?>
<Templates encode="utf8escenc"><Template Name="bool">bool [+var+] = [+false+];</Template><Template Name="byte">byte [+x+] = [+0+];</Template><Template Name="char">char [+var+] = '[+string+]';</Template><Template Name="checked">checked ([+expression+])</Template><Template Name="class">class [+name+]&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="decimal">decimal [+var+] = [+int+]m;</Template><Template Name="delegate">delegate [+void+] [+name+]([+params+]);</Template><Template Name="do">do &#xD;
{&#xD;
	^ &#xD;
} while ([+evaluation+]) </Template><Template Name="double">double [+var+] = [+int+];</Template><Template Name="else">else&#xD;
	^</Template><Template Name="elseif">else &#xD;
	if ([+evaluation+])&#xD;
		^</Template><Template Name="enum">enum [+identifier+] {[+list+]};</Template><Template Name="event">event [+delegate+] [+name+]</Template><Template Name="fixed">fixed ([+type+]* [+pointer+] = [+exp+]) {&#xD;
	^&#xD;
}</Template><Template Name="float">float [+var+] = [+number+];</Template><Template Name="for">for (int [+n+]=[+X+]; [+n+]&lt;=[+Y+]; [+n+]++)&#xD;
{&#xD;
	^ &#xD;
}</Template><Template Name="foreach">foreach ([+type+] [+var+] in [+col+])&#xD;
{&#xD;
	^&#xD;
} </Template><Template Name="function">[+visibility+] [+return type+] [+name+] ([+parameters+])&#xD;
{&#xD;
	^ // statements&#xD;
}</Template><Template Name="if">if ([+evaluation+]) &#xD;
	^</Template><Template Name="int">int [+var+] = [+int+];</Template><Template Name="interface">interface [+name+]&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="lock">lock ([+this+])&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="long">long [+var+] = [+int+];</Template><Template Name="namespace">namespace [+name+]&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="new">new [+objName+] ([+params+]);</Template><Template Name="object">object [+name+];</Template><Template Name="operator">operator [+oper+]([+opType+] [+operand+])&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="return">return [+expression+];</Template><Template Name="sbyte">sbyte [+var+] = [+int+];</Template><Template Name="sealed">sealed class [+name+]&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="short">short [+var+] = [+int+];</Template><Template Name="sizeof">sizeof([+type+])</Template><Template Name="stackalloc">stackalloc [+type+][[+expression+]]</Template><Template Name="static">static [+type+] [+name+]()&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="string">string [+var+] = "[+string+]";</Template><Template Name="struct">struct [+identifier+]&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="switch">switch ([+expression+])&#xD;
{&#xD;
	case [+value+]:&#xD;
		^ &#xD;
	break;&#xD;
	default:&#xD;
		&#xD;
}</Template><Template Name="throw">throw [+expression+];</Template><Template Name="try">try&#xD;
{&#xD;
	^ // code to try&#xD;
}&#xD;
catch [+err+]&#xD;
{&#xD;
	// error handling&#xD;
}</Template><Template Name="typeof">typeof([+type+])</Template><Template Name="uint">uint [+var+] = [+int+];</Template><Template Name="ulong">ulong [+var+] = [+int+];</Template><Template Name="unchecked">unchecked ([+expression+])</Template><Template Name="unsafe">unsafe [+static+] [+void+] [+name+]([+params+]&#xD;
{&#xD;
	^&#xD;
}</Template><Template Name="ushort">ushort [+var+] = [+int+];</Template><Template Name="void">void [+name+]();</Template><Template Name="while">while ([+evaluation+]) &#xD;
{&#xD;
	^&#xD;
}</Template></Templates>
